# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"

source /home/benclarke/nonWorkStuff/welcome_banner.sh

plugins=( 
    git
    dnf
    zsh-autosuggestions
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# check the dnf plugins commands here
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dnf


# Display Pokemon-colorscripts
# Project page: https://gitlab.com/phoneybadger/pokemon-colorscripts#on-other-distros-and-macos
# pokemon-colorscripts --no-title -s -r


### From this line is for pywal-colors
# Import colorscheme from 'wal' asynchronously
# &   # Run the process in the background.
# ( ) # Hide shell job control messages.
# Not supported in the "fish" shell.
#(cat ~/.cache/wal/sequences &)

# Alternative (blocks terminal for 0-3ms)
#cat ~/.cache/wal/sequences

# To add support for TTYs this line can be optionally added.
#source ~/.cache/wal/colors-tty.sh

# ALIASES
alias ls=eza
alias rescore="cd $HOME/WorkStuff/resilient-core"
alias lg=lazygit
alias nixHome="vim /home/benclarke/.config/home-manager/home.nix"
alias work="cd /home/benclarke/WorkStuff"
alias tree="exa --tree"

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/home/benclarke/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

eval $(thefuck --alias)

export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
export SSH_AUTH_SOCK=~/.1password/agent.sock
export RESILIENT_CORE=/home/benclarke/WorkStuff/resilient-core
export PATH="/home/benclarke/.local/bin:/home/benclarke/.local/lib/python3.11/site-packages:$PATH"
export PATH
if [ -e /home/benclarke/.nix-profile/etc/profile.d/nix.sh ]; then . /home/benclarke/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/benclarke/miniforge3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/benclarke/miniforge3/etc/profile.d/conda.sh" ]; then
        . "/home/benclarke/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="/home/benclarke/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/home/benclarke/miniforge3/etc/profile.d/mamba.sh" ]; then
    . "/home/benclarke/miniforge3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<

# If not running in nested shell, then show welcome message :)
if [[ "${SHLVL}" -lt 2 ]] && \
  { [[ -z "$SKIP_WELCOME" ]] || [[ "$SKIP_WELCOME" == "false" ]]; }; then
  welcome
fi

export PYENV_ROOT="$HOME/.pyenv"

# [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init --path)"


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

export GPG_TTY=$(tty)
